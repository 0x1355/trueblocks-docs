<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on</title><link>/blog/</link><description>Recent content in Blog on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:55 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>User contribution: Trueblocks Plotter</title><link>/blog/user-contribution-trueblocks-plotter/</link><pubDate>Fri, 29 Oct 2021 18:10:28 -0400</pubDate><guid>/blog/user-contribution-trueblocks-plotter/</guid><description>Matt Solomon, over at ScopeLift, used TrueBlocks as a backend to build a cool tool. TrueBlocks plotter lets you visualize and plot Ethereum data in your browser.
Thanks for expanding the TrueBlocks universe!</description></item><item><title>User post: Local Data Extraction</title><link>/blog/user-post-local-data-extraction/</link><pubDate>Fri, 29 Oct 2021 17:55:05 -0400</pubDate><guid>/blog/user-post-local-data-extraction/</guid><description>Go read the post. Thanks for the support and shoutout!</description></item><item><title>Recipe: Running Against Multiple Rpc Endpoints</title><link>/blog/recipe-running-against-multiple-rpc-endpoints/</link><pubDate>Wed, 21 Apr 2021 17:13:04 -0400</pubDate><guid>/blog/recipe-running-against-multiple-rpc-endpoints/</guid><description>One user asked if it was possible to run TrueBlocks against multiple RPC endpoints at the same time. This is short recipe to accomplish just that.
Preliminaries The first thing to understand is that the TrueBlocks core runs against a local configuration file stored in your $HOME folder called $HOME/.quickBlocks/quickBlocks.toml. It&amp;rsquo;s an almost ridiculously simple file.
The file gets created and populated with default values the first time you build TrueBlocks.</description></item><item><title>Recipe: Getting Erc20 Transfer Events</title><link>/blog/recipe-getting-erc20-transfer-events/</link><pubDate>Tue, 13 Apr 2021 08:00:02 -0400</pubDate><guid>/blog/recipe-getting-erc20-transfer-events/</guid><description>A TrueBlocks recipe to display every ERC20 Transfer event from a given smart contract.
Note: The following assumes you have a copy of (either by having built it yourself or downloaded it) the TrueBlocks Appearance Index. These instructions also assume that the address you&amp;rsquo;re querying is an ERC 20 smart contract.
Preliminaries To get started, we want to extract (from the TrueBlocks index) a list of every transaction that our address has ever appeared in.</description></item><item><title>Recipe: List Tokens I Own</title><link>/blog/recipe-list-tokens-i-own/</link><pubDate>Tue, 13 Apr 2021 08:00:02 -0400</pubDate><guid>/blog/recipe-list-tokens-i-own/</guid><description>A TrueBlocks recipe to query ERC 20 token balances for an address.
Note: The following assumes you have a copy of (either by having built it yourself or downloaded it) the TrueBlocks Appearance Index.
Preliminaries We start by extracting from the chain all the transactions for the address in question. We will use a randomly selected address that we know owns a number of different tokens.
chifra list 0x03fdcadc09559262f40f5ea61c720278264eb1da
This produces a list of 2,129 appearances (at the time of this writing).</description></item><item><title>A Long Winded Explanation of TrueBlocks</title><link>/blog/a-long-winded-explanation-of-trueblocks/</link><pubDate>Mon, 05 Apr 2021 19:21:58 -0300</pubDate><guid>/blog/a-long-winded-explanation-of-trueblocks/</guid><description>Recently, I was engaged in a tweetstorm with Nick Johnson, for whom I have deep, deep respect. The storm was about the topic of indexing the Ethereum blockchain. As is usually the case with my tweetstorms, I don&amp;rsquo;t think I explained myself well during the thunder and lightning, so I thought I&amp;rsquo;d take a moment during the lull to better explain myself. So this is an explanation for Nick (and anyone else who&amp;rsquo;s listening) about how TrueBlocks indexes the Ethereum blockchain.</description></item><item><title>Dynamic Traversers for TrueBlocks</title><link>/blog/dynamic-traversers-for-trueblocks/</link><pubDate>Wed, 09 Dec 2020 12:29:07 +0000</pubDate><guid>/blog/dynamic-traversers-for-trueblocks/</guid><description>Dynamic Traversers in TrueBlocks Ethereum nodes come to consensus on a world-wide global ledger of smart contract invocations every 14 seconds. Everyone know this. This is what we celebrate about the chain. Not only is this data world-wide and consented-to, but it is also permissionless. At least that’s what we’re supposed to believe.
But, is it really permissionless?
I think the answer to that question is a resounding “No.” Ask yourself how you personally get data from the Ethereum blockchain.</description></item><item><title>How Safe are My Private Keys?</title><link>/blog/how-safe-are-my-private-keys/</link><pubDate>Wed, 09 Dec 2020 12:29:07 +0000</pubDate><guid>/blog/how-safe-are-my-private-keys/</guid><description/></item><item><title>Every 15 Seconds…</title><link>/blog/every-15-seconds/</link><pubDate>Wed, 09 Dec 2020 09:43:00 +0000</pubDate><guid>/blog/every-15-seconds/</guid><description>…a piece of open source software called an Ethereum node collects together a random, unordered collection of transactions, and after throwing out the invalid ones, puts the rest in a well-defined order.
The system then seals this newly ordered list for the rest of human history (modulo re-orgs) by creating a 32-byte block hash that stands in a one-to-one correspondence to that ordered list.
The system then quickly moves on to a newly growing collection of unordered transactions, leaving behind it a trail of sealed blocks.</description></item><item><title>Ethereum’s Issuance: uncleReward</title><link>/blog/ethereums-issuance-unclereward/</link><pubDate>Sat, 15 Aug 2020 12:13:31 +0000</pubDate><guid>/blog/ethereums-issuance-unclereward/</guid><description>This the second in a series of two articles detailing Ethereum’s issuance. Read the first part, which discusses the blockReward calculation. Also, see the code base for the actual code. This article discusses the uncleReward.
Uncle Reward Previously, we looked at the ungrammatical second sentence in Section 11.3 of Ethereum’s Yellow Paper. In the first article, we discussed the first half of that sentence concerning blockReward. In this article we discuss the remaining half of that sentence (shown below) which details the uncleReward.</description></item></channel></rss>