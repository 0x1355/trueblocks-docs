var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});b.add({id:0,href:"/docs/",title:"What is this?",description:"TrueBlocks Docs",content:'\u003cp\u003eTrueBlocks builds and publishes an index that lets you explore the Ethereum\nblockchain from your local machine.\u003c/p\u003e\n\u003ch2 id="without-a-local-index-ethereum-is-not-really-permissionless"\u003eWithout a local index, Ethereum is not really permissionless\u003c/h2\u003e\n\u003cp\u003eMore specifically, without an index, Ethereum cannot effectively serve\ndesktop applications the type of data that the applications need.\u003c/p\u003e\n\u003cp\u003eEthereum is supposed to be permissionless. The blockchain is supposed to be a\nrecord of all transactions. Without an index, however, the blockchain is undiscoverable,\nlike the internet would be without search engines. Or like being lost at sea\u0026hellip;\u003c/p\u003e\n\u003cimg src="/docs/img/steam-boat-off-a-harbor.jpg" alt="The term cybernetics stems from the Greek κυβερνήτης (kybernētēs, steersman, governor, pilot, or rudder)When Norman Weiner coined the word, he was fascinated in the control of systems. Who controls Ethereum?" width="500"/\u003e\n\u003cp\u003eOf course, you can register with an Ethereum block explorer, like EtherScan,\nand access the blockchain remotely.\nThe trouble is that these resources are shared by many users,\nwhich entails an anti-privacy sequence:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTo prevent any user from using more than their fair share, the service\nneeds to limit each user\u0026rsquo;s usage\u003c/li\u003e\n\u003cli\u003eBecause of (1), the service needs to identify each user\u003c/li\u003e\n\u003cli\u003eBecause of (2), the service is no longer private, especially as each user\nlikely queries the same set of addresses each time they visit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFurthermore, just like searching the internet with Google,\nyou consent to any query logging or datamining that the service wants to do,\nand you can\u0026rsquo;t even be sure the data is accurate.\u003c/p\u003e\n\u003ch2 id="trueblocks-provides-this-local-index"\u003eTrueBlocks provides this local index\u003c/h2\u003e\n\u003cp\u003eTrueblocks builds a local index directly on your machine.\nIt ships with large suite of command line options to let you make the queries you\nwant to make─addresses, names, ABIs, etc.\u003c/p\u003e\n\u003cp\u003eIn addition to the command line, TrueBlocks also provides a graphical user interface\nwith the \u003ca href="/docs/explorer/gui-for-trueblocks"\u003eExplorer\u003c/a\u003e application.\nSo you don\u0026rsquo;t need to be highly technical to use TrueBlocks.\u003c/p\u003e\n\u003ch3 id="and-yes-its-permissionless"\u003eAnd yes, it\u0026rsquo;s permissionless\u003c/h3\u003e\n\u003cp\u003eTrueBlocks is open source. If you don\u0026rsquo;t like something, you\u0026rsquo;re free to modify the\nsoftware, or fork it.\u003c/p\u003e\n\u003cp\u003eWe also distribute copies of the index on the IPFS, meaning that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethe data is immutable (i.e. we can\u0026rsquo;t mess with it)\u003c/li\u003e\n\u003cli\u003ethe data doesn\u0026rsquo;t belong to anyone\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="the-index-provides-huge-engineering-advantages"\u003eThe index provides huge engineering advantages\u003c/h2\u003e\n\u003cp\u003eBesides the philosophical benefits, TrueBlocks is straight up more performant.\nSome highlights:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eQuerying straight from your hard drive is \u003cem\u003efaster by many factors.\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eBinary cache makes subsequent queries \u003cem\u003enearly instantaneous\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eLeaving the data on the chain until it\u0026rsquo;s queried shrinks storage requirements for the typical user from \u003cem\u003eterabytes to gigabytes\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eBloom filters further reduce computation and storage overhead\u003c/li\u003e\n\u003cli\u003eArticulate to resolve transactions on the byte level, \u003cem\u003eturning byte streams into human-readable data.\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eFormat-agnostic.\u003c/em\u003e Receive data in JSON, CSV, plain text, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTrueBlocks performs so well because the design is 100% data first. We are lifelong\nhackers, and we agree with \u003ca href="https://lwn.net/Articles/193245/"\u003eLinus Torvalds when he\nsaid\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn fact, I\u0026rsquo;m a huge proponent of designing your code around the data, rather than the other way around\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="great-but-i-want-many-more-words"\u003eGreat! But I want many more words.\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;ve got more words for you. \u003ca href="/blog/a-long-winded-explanation-of-trueblocks/"\u003eThis blog post covers these topics in much more detail\u003c/a\u003e.\u003c/p\u003e\n'}).add({id:1,href:"/docs/prologue/do-i-need-a-node/",title:"Do I need a node?",description:"A node is not required, but that's the only way use Trueblocks as it is intended.",content:'\u003cp\u003eAnd if you have a node, its preferably with Erigon.\u003c/p\u003e\n\u003cp\u003eSome benefits of TrueBlocks can be realized only when a user has their own node.\nHaving a node lets users:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLimit queries to the node on their machine\u003c/li\u003e\n\u003cli\u003eUse the node to build a local index\u003c/li\u003e\n\u003cli\u003eQuery data directly from the top of the chain\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSetting up a node is not as hard as many people think, but it does require two TBs of storage\nand some good hardware.\u003c/p\u003e\n\u003cp\u003eIf you want to build your own index, plan for a few days and run \u003ccode\u003echifra scrape\u003c/code\u003e.\nBefore doing so, you probably want to read the relevant section in the\n\u003ca href="./how-can-i-get-the-index"\u003e\u0026ldquo;How Can I Get the Index\u0026rdquo;\u003c/a\u003e article,\nand \u003ca href="../../chifra/admin#chifra-scrape"\u003ethe \u003ccode\u003escrape\u003c/code\u003e command documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFortunately, TrueBlocks also publishes the index on the IPFS,\nwhich lets you access it locally without running a node.\u003c/p\u003e\n\u003ch2 id="without-a-node-you-can-download-the-index-from-the-ipfs"\u003eWithout a node, you can download the index from the IPFS\u003c/h2\u003e\n\u003cp\u003eDownloading the IPFS manifest is a good option for many users:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe initial time to get started is much faster\u003c/li\u003e\n\u003cli\u003eThe index occupies only the space you need, (between 1 and 80GB)\u003c/li\u003e\n\u003cli\u003eYou can verify its correctness with the TrueBlocks source code\u003c/li\u003e\n\u003cli\u003eYou can own the index on your local machine (though you still need to query remote RPCs for transaction data).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two commands to download the index, \u003ccode\u003echifra init\u003c/code\u003e and \u003ccode\u003echifra pins\u003c/code\u003e.\nThe pros and cons of each approach are outlined in the\n\u003ca href="./how-can-i-get-the-index"\u003e\u0026ldquo;How Can I Get the Index?\u0026quot;\u003c/a\u003e article.\u003c/p\u003e\n\u003ch3 id="drawbacks-of-using-the-ipfs-manifest"\u003eDrawbacks of using the IPFS manifest\u003c/h3\u003e\n\u003cp\u003eThe drawbacks of using the IPFS manifest are the opposite of the benefits\nof building an index from your own node:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou still must query transaction data from remote RPCs\u003c/li\u003e\n\u003cli\u003eYou must trust the data TrueBlocks publishes (though you can verify the build)\u003c/li\u003e\n\u003cli\u003eYou can only query up to the last time TrueBlocks published the manifest\u003c/li\u003e\n\u003c/ul\u003e\n'}).add({id:2,href:"/docs/prologue/installing-trueblocks/",title:"Install TrueBlocks",description:"TrueBlocks works on Linux and Mac",content:'\u003c!---\nThe links in this section are hard coded so that can be pasted into the\ndirectory README.\n--\u003e\n\u003cp\u003eThese instructions assume you can navigate directories with the command line\nand edit configuration files.\nIf you need help with a step, see the \u003ca href="https://trueblocks.io/docs/prologue/installing-trueblocks/#troubleshooting"\u003einstallation\u0026rsquo;s troubleshooting section\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="quick-install"\u003eQuick Install\u003c/h2\u003e\n\u003col start="0"\u003e\n\u003cli\u003e\n\u003cp\u003eInstall dependencies\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e☑ \u003ca href="https://golang.org/doc/install"\u003eInstall the latest version of Go\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e☑ Install the other dependencies with your command line: \u003ccode\u003ebuild-essential\u003c/code\u003e \u003ccode\u003egit\u003c/code\u003e \u003ccode\u003ecmake\u003c/code\u003e \u003ccode\u003epython\u003c/code\u003e \u003ccode\u003epython-dev\u003c/code\u003e \u003ccode\u003elibcurl3-dev\u003c/code\u003e \u003ccode\u003eclang-format\u003c/code\u003e \u003ccode\u003ejq\u003c/code\u003e.\n\u003cbr/\u003e\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCompile from the codebase\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003egit clone -b develop https://github.com/trueblocks/trueblocks-core\ncd trueblocks-core\nmkdir build \u0026amp;\u0026amp; cd build\ncmake ../src\nmake\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003e(You may use \u003ccode\u003emake -j nproc\u003c/code\u003e to parallelize the build.)\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdd \u003ccode\u003etrueblocks-core/bin\u003c/code\u003e to your shell PATH.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFind your TrueBlocks configuration directory. It should be in one of these places:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOn linux at \u003ccode\u003e~/.local/share/trueblocks\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOn mac at \u003ccode\u003e~/Library/Application Support/TrueBlocks\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIf you\u0026rsquo;ve configured it, wherever the location of \u003ccode\u003e$XDG_DATA_HOME\u003c/code\u003e is\n\u003cbr/\u003e\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the configuration directory, edit \u003ccode\u003etrueblocks.toml\u003c/code\u003e to add your RPC and\nAPI keys. It should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-toml"\u003e[settings]\nrpcProvider = \u0026quot;\u0026lt;url-to-rpc-endpoint\u0026gt;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTest a command!\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra blocks 12345\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="optional-steps"\u003eOptional steps\u003c/h3\u003e\n\u003col start="6"\u003e\n\u003cli\u003eTo make deep data queries, \u003ca href="https://trueblocks.io/docs/prologue/how-can-i-get-the-index/"\u003eget the index\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTo explore the data visually, \u003ca href="https://trueblocks.io/docs/prologue/install-explorer/"\u003einstall the explorer application\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="troubleshooting"\u003eTroubleshooting\u003c/h2\u003e\n\u003cp\u003eHere are some problems users have run into at each step.\nIf you\u0026rsquo;re still having trouble, \u003ca href="https://github.com/TrueBlocks/trueblocks-core/issues"\u003ecreate an issue\u003c/a\u003e,\nor ask us on discord.\u003c/p\u003e\n\u003ch3 id="dependencies"\u003eDependencies\u003c/h3\u003e\n\u003ch4 id="how-do-i-check-my-go-version"\u003eHow do I check my Go version?\u003c/h4\u003e\n\u003cp\u003eRun this command\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003ego version\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTrueBlocks needs version 1.12.x or later.\u003c/p\u003e\n\u003ch4 id="how-do-i-install-packages-on-the-command-line"\u003eHow do I install packages on the command line?\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eFor Linux\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003esudo apt install build-essential git cmake python python-dev libcurl3-dev clang-format jq\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor Mac:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFor best results, we recommend running MacOS Big Sur or later.\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003ebrew install cmake\nbrew install git\nbrew install clang-format\nbrew install jq\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="compiling"\u003eCompiling\u003c/h3\u003e\n\u003ch4 id="how-many-cores-can-i-use-to-make-trueblocks"\u003eHow many cores can I use to make TrueBlocks?\u003c/h4\u003e\n\u003cp\u003eWhen you run \u003ccode\u003emake\u003c/code\u003e, you can speed up the build by parallelizing with\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003emake -j \u0026lt;ncores\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhere \u003ccode\u003e\u0026lt;ncores\u0026gt;\u003c/code\u003e represents the number of cores to devote to the job.\nHow many cores can you use? That depends on many factors. A handy tool is \u003ccode\u003enproc\u003c/code\u003e,\nwhich identifies the machine\u0026rsquo;s number of available processing units.\u003c/p\u003e\n\u003cp\u003eIf you have \u003ccode\u003enproc\u003c/code\u003e installed, you can safely parallelize the build with this command\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003emake -j `nproc`\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="how-do-i-know-if-compilation-was-successful"\u003eHow do I know if compilation was successful?\u003c/h4\u003e\n\u003cp\u003eFrom the \u003ccode\u003etrueblocks-core\u003c/code\u003e directory, test your install with this command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003e../bin/chifra --version\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should get a version string similar to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003etrueBlocks GHC-TrueBlocks//0.9.0-alpha-409aa9388-20210503\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf nothing outputs, the build has failed. Try repeating the instructions.\nIf it still fails, make an issue.\u003c/p\u003e\n\u003ch3 id="how-do-i-export-to-path"\u003eHow do I export to PATH?\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003echifra\u003c/code\u003e only works if its underlying tools are found in your \u003ccode\u003e$PATH.\u003c/code\u003e\nTo find the full path, run this from the top of the \u003ccode\u003etrueblocks-core\u003c/code\u003e directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003ecd bin \u0026amp;\u0026amp; pwd \u0026amp;\u0026amp; cd -\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAdd the result of that command to your shell’s \u003ccode\u003e$PATH\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHow you do that depends on your system.\nIn Bash, you\u0026rsquo;re probably going to put something like this in your \u003ccode\u003e.bashrc\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003eexport PATH=${PATH}:\u0026lt;/path/to/trueblocks-core/directory\u0026gt;/bin\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are confused, a Google search may be in order…\u003c/p\u003e\n\u003ch3 id="configuring-rpcs"\u003eConfiguring RPCs\u003c/h3\u003e\n\u003ch4 id="how-do-i-add-my-local-rpc"\u003eHow do I add my local RPC?\u003c/h4\u003e\n\u003cp\u003eBy default, TrueBlocks checks for an RPC on \u003ccode\u003ehttp://localhost:8545/\u003c/code\u003e.\nIf you are running a local node on a different port, simply change the port.\u003c/p\u003e\n\u003ch4 id="how-do-i-add-external-rpcs-and-etherscan"\u003eHow do I add external RPCs and etherscan?\u003c/h4\u003e\n\u003cp\u003eIf you are using an external RPC, you to need add its endpoint.\nSimilarly, for deep exploration of ABI data, \u003ca href="/docs/chifra/chaindata/"\u003esome tool interfaces have an\n\u003ccode\u003e--articulate\u003c/code\u003e option\u003c/a\u003e.\nThe \u003ccode\u003earticulate\u003c/code\u003e option requires an EtherScan API key.\nWe are working on removing this centralized dependency.\u003c/p\u003e\n\u003cp\u003eIn your config file, the specific RPC path will differ depending on the service.\u003c/p\u003e\n\u003cp\u003eHere’s an example for Infura and EtherScan, with \u0026lt;key_value\u0026gt; being replaced by a\nhash string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-TOML"\u003e[settings]\nrpcProvider = \u0026quot;https://mainnet.infura.io/v3/\u0026lt;key_value\u0026gt;\u0026quot;\netherscan_key = \u0026quot;\u0026lt;key_value\u0026gt;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="why-should-i-get-an-index"\u003eWhy should I get an index?\u003c/h3\u003e\n\u003cp\u003eWhen you query basic transaction data, you don\u0026rsquo;t need an index.\nHowever, most people want to explore entire histories of addresses, calls, and traces.\nDoing that requires an index.\u003c/p\u003e\n\u003cp\u003eThere are multiple options, which the \u003ca href="../how-can-i-get-the-index"\u003eHow Can I Get the Index?\u003c/a\u003e\narticle covers in more detail.\u003c/p\u003e\n\u003cp\u003eNo matter what method, getting the index will take somewhere between 10 minutes\nand a few days. So you might want to play around with some \u003ca href="../../chifra/chaindata"\u003echifra blockchain\ncommands\u003c/a\u003e first.\u003c/p\u003e\n'}).add({id:3,href:"/docs/prologue/how-can-i-get-the-index/",title:"Get the Index",description:"There are three ways to get the index. Each way involves some tradeoff between initialization time, storage use, and local access.",content:'\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIf you want to\u0026hellip;\u003c/th\u003e\n\u003cth\u003eand you don\u0026rsquo;t mind\u0026hellip;\u003c/th\u003e\n\u003cth\u003ethen use\u0026hellip;\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eminimize the size of the data stored locally and you want to get started faster\u0026hellip;\u003c/td\u003e\n\u003ctd\u003eslower first-time queries on new addresses, an index that\u0026rsquo;s slightly behind the head of the chain, an index created by someone else\u0026hellip;\u003c/td\u003e\n\u003ctd\u003e\u003ca href="#use-init-to-get-only-the-chunks-you-query"\u003e\u003ccode\u003echifra init\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emaximize the speed of first-time queries for new addresses\u0026hellip;\u003c/td\u003e\n\u003ctd\u003elonger initial setup time, ~70 GB of local storage, an index that\u0026rsquo;s slightly behind the head of the chain, an index created by someone else\u0026hellip;\u003c/td\u003e\n\u003ctd\u003e\u003ca href="#use_init_all-to-get-all-index-chunks"\u003e\u003ccode\u003echifra pins --init_all\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehave a fully-local index, built directly from your own node, that stays up with the chain and maximizes the speed of your queries\u0026hellip;\u003c/td\u003e\n\u003ctd\u003etwo to three days setup time and running your own local tracing / archive node (such as dAppnode)\u0026hellip;.\u003c/td\u003e\n\u003ctd\u003e\u003ca href="#use-scrape-to-build-your-own-index"\u003e\u003ccode\u003echifra scrape\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="getting-the-index-without-running-a-node"\u003eGetting the index without running a node\u003c/h2\u003e\n\u003cp\u003eIf you\u0026rsquo;re not running your own node (or you don\u0026rsquo;t feel like waiting), you can download all or part of a pre-built index from IPFS.\u003c/p\u003e\n\u003cp\u003eTo do this, you have two options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erun \u003ccode\u003echifra init\u003c/code\u003e to download only the Bloom filters. Then, as you query individual addresses, TrueBlocks will download the much-larger index chunks (\u003cem\u003efaster now, slower later\u003c/em\u003e)\u003c/li\u003e\n\u003cli\u003erun \u003ccode\u003echifra pins --init_all\u003c/code\u003e to download both the Bloom filters and the index chunks all at once (\u003cem\u003eslower now, faster later\u003c/em\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="use-chifra-init-to-get-a-subset-of-the-data"\u003eUse chifra init to get a subset of the data\u003c/h3\u003e\n\u003cp\u003eTo get only the Bloom filters, run \u003ccode\u003echifra init\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you do this, you will have to periodically re-run the command to update your index. (\u003ca href="#Supplementary-how-can-I-see-when-the-manifest-was-last-published"\u003eRead about the finding the latest manifest\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eFor more information, see the \u003ca href="../../chifra/admin.md#chifra-init"\u003e\u003ccode\u003echifra init\u003c/code\u003e command documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInitial set up time\u003c/strong\u003e: \u003ccode\u003echifra init\u003c/code\u003e takes only about a half an hour on a machine with a good connection. (We\u0026rsquo;ve had report from some users that it takes much longer, but we suspect they are on slow machines.) We highly prefer you have a capable machine.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStorage use\u003c/strong\u003e: In this scenario, since you only download the Bloom filters, the space required is about 1GB. Subsequently, as you download individual chunk, each chunk occupies about 25MB.\u003c/p\u003e\n\u003cp\u003eThe number of index chunks you download depends entirely on the addresses you query. Of course, if you query a lightly used address, very few chunks will be downloaded. However, if you query are heavily used address, such as UniSwap, nearly every chunk will be downloaded. This is by design. In the later case, you would probably be better off using \u003ccode\u003echifra pins --init_all\u003c/code\u003e to begin with.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor typical addresses (e.g. personal accounts), storage is somewhere between 50 to 500 MB\u003c/li\u003e\n\u003cli\u003eFor more active addresses, storage may be as much as 1 or 2 GB\u003c/li\u003e\n\u003cli\u003eFor very popular smart contracts, the storage requirement may be as high as 50 GB\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eHow it works\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen you run \u003ccode\u003echifra init\u003c/code\u003e, TrueBlocks downloads a set of Bloom filters from the latest published manifest to your local machine. Subsequently, when you want to explore an address history, e.g. with the command \u003ccode\u003echifra export \u0026lt;address\u0026gt;\u003c/code\u003e, TrueBlocks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eScans the Bloom filters for potential matches and if there\u0026rsquo;s a hit, downloads the corresponding index chunks.\u003c/li\u003e\n\u003cli\u003eReturns the set of \u003ccode\u003eappearances\u003c/code\u003e for the address as pairs of \u003ccode\u003e\u0026lt;block number\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;transaction_id\u0026gt;\u003c/code\u003e. (This permits direct queries for exact details of desired transaction histories).\u003c/li\u003e\n\u003cli\u003eGiven the list of \u003ccode\u003eappearances\u003c/code\u003e, TrueBlocks pulls the full transacitonal history of the account from any (remote or local) RPC endpoint.\u003c/li\u003e\n\u003cli\u003eDuring the query, you may instruct TrueBlocks to cache the response locally, making future queries for this same address nearly instantaneous.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="use-chifra-pins---init_all-to-get-the-entirity-of-the-index"\u003eUse chifra pins \u0026ndash;init_all to get the entirity of the index\u003c/h3\u003e\n\u003cp\u003eTo get the entirety of the appearance index, run \u003ccode\u003echifra pins --init_all\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you use this command and don\u0026rsquo;t run \u003ccode\u003echifra scrape\u003c/code\u003e, you will have to update the index periodically by running the command again. (\u003ca href="#Supplementary-how-can-I-see-when-the-manifest-was-last-published"\u003eRead about the finding the latest manifest\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eFor detailed instructions, see the [\u003ccode\u003echifra pins\u003c/code\u003e] documentation(../../chifra/admin#chifra-pins).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInitial set up time\u003c/strong\u003e: Somewhere between six and ten hours depending on the speed of your connection.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStorage use\u003c/strong\u003e: About 60GB-80GB\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHow it works\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe initialization is very similar to the \u003ccode\u003einit\u003c/code\u003e process described in the previous section.\u003c/p\u003e\n\u003cp\u003eHowever, while \u003ccode\u003echifra init\u003c/code\u003e downloads only the Bloom filters, downloading the index chunks only after a user queries for an address, \u003ccode\u003echifra pins --init_all\u003c/code\u003e \u003cem\u003edownloads all index chunks up front\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhile this process takes much longer (perhaps hours), when you query a particular address in the future, TrueBlocks no longer has to download anything.\nTherefore, the query is significantly faster.\nIn other words, the first time you run \u003ccode\u003echifra export \u0026lt;transaction\u0026gt;\u003c/code\u003e, the process is much faster than it is if you initialize with \u003ccode\u003echifra init\u003c/code\u003e alone.\u003c/p\u003e\n\u003cp\u003eAs is true of the previous methods, if you enable caching, subsequent queries for the same address return almost instantly.\u003c/p\u003e\n\u003ch2 id="use-chifra-scrape-to-build-your-own-index"\u003eUse chifra scrape to build your own index\u003c/h2\u003e\n\u003cp\u003eTo build your own index without any downloading, run \u003ccode\u003echifra scrape\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor detailed instructions, see the \u003ca href="../../chifra/admin#chifra-scrape"\u003e\u003ccode\u003echifra scrape\u003c/code\u003e command documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInitial set up time\u003c/strong\u003e: This method requires a locally-running tracing / archive node such as dAppNode running Erigon. Early users have reported 2-4 days to build the index from scratch. (You may wish to run \u003ccode\u003echifra scrape\u003c/code\u003e in an application like \u003ccode\u003etmux\u003c/code\u003e, so you can close the terminal window while it builds.)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStorage use\u003c/strong\u003e: About 60GB.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHow it works\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003eThe end result of \u003ccode\u003echifa scrape\u003c/code\u003e is the same as the end result of \u003ccode\u003echifra pins --init_all\u003c/code\u003e. However, the process is crucially different: rather than downloading the index that we publish (that is, trusting us), \u003ccode\u003echifra scrape\u003c/code\u003e \u003cem\u003ebuilds the index on your local machine connecting only with your local-running RPC endpoint\u003c/em\u003e, which means if you trust your own setup, you can trust the data.\u003c/p\u003e\n\u003cp\u003e(One note: It\u0026rsquo;s possible to run against any RPC endpoint \u0026ndash; remote or local \u0026ndash; but because the TrueBlocks scraper hits the node continually and very aggressively, you will probably get rate-limited against a shared RPC server such as Infura.)\u003c/p\u003e\n\u003cp\u003eA good explanation of this whole process requires a long form article. For now, the curious may look at the best documentation available, the \u003ccode\u003esrc\u003c/code\u003e directory of the source code.\u003c/p\u003e\n\u003ch2 id="one-final-note-on-building--making-the-index"\u003eOne final note on building / making the index\u003c/h2\u003e\n\u003cp\u003eYou can, if you wish, mix and match the above methods.\u003c/p\u003e\n\u003cp\u003eFor example, you can initially download only the Bloom filters with \u003ccode\u003echifra init\u003c/code\u003e and then start up \u003ccode\u003echifra scrape\u003c/code\u003e in the background. This would allow you to get started quickly but stay up to the front of the chain. Of course, as with everything, there\u0026rsquo;s a tradeoff. You will be storing a few MB every time a new chunk is created (about three times a day). In return, it\u0026rsquo;s way faster to query and the index stay up to the chain.\u003c/p\u003e\n\u003cp\u003eAlternatively, you may choose to scrape (i.e. build) the index yourself and share it with others by pinning it on IPFS. In this case, you\u0026rsquo;re being a good citizen and making the whole ecosystem better off becuase you\u0026rsquo;re sharing you index.\u003c/p\u003e\n\u003cp\u003eYou can download the index (either with \u003ccode\u003echifra init\u003c/code\u003e or \u003ccode\u003echifra pins --init_all\u003c/code\u003e) and pin that data (with the \u003ccode\u003e--pin_locally\u003c/code\u003e flag) as a way to share with the community, and then turn on the scraper. All options are available as a way to maximize the usefulness of the tool.\u003c/p\u003e\n\u003ch2 id="supplementary-how-can-i-see-when-the-manifest-was-last-published"\u003eSupplementary: how can I see when the manifest was last published?\u003c/h2\u003e\n\u003cp\u003eIf you are using one of the \u003ccode\u003einit\u003c/code\u003e options, you may wish to know how \u0026lsquo;fresh\u0026rsquo; your index is.\u003c/p\u003e\n\u003cp\u003eTrueBlocks tries to publish the manifest frequently (weekly?), but you can always check. The eventual goal of to publish the manifest each time a new chunk is produced (about two or three times a day). But this is \u003ccode\u003egas-expensive\u003c/code\u003e, so we would need to secure funding for that process. We welcome donations, peers and alternative indexers to participate!.\u003c/p\u003e\n\u003cp\u003eYou can find the most \u003ca href="https://etherscan.io/address/0xcfd7f3b24f3551741f922fd8c4381aa4e00fc8fd#readContract"\u003erecent manifest here\u003c/a\u003e. (Open the \u003ccode\u003emanifestHash\u003c/code\u003e record.)\u003c/p\u003e\n\u003cp\u003eEach pin has a given block range, which you can check yourself using \u003ccode\u003echifra\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor example, see the last manifest record by running\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra pins --list | tail -n 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis outputs something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e012909804-012912694     QmSQvJ5GPyc8juthKgvMaonxm2t2m939MphyMhBRuHKJzt  QmVCZdXD9EMU9jR6HKp8V1bC74DQDCzGurLxnK6KnbV2LP\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first field of the output provides the block range for the latest chunk. So, you could see when the last block of the latest\nrange was published by running \u003ccode\u003echifra when\u003c/code\u003e on the last record:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003e$chifra when 012912694\nblocknumber     timestamp       date    name\n12912694        1627451435      2021-07-28 05:50:35 UTC\n\u003c/code\u003e\u003c/pre\u003e\n'}).add({id:4,href:"/docs/prologue/install-explorer/",title:"Install the Explorer Browser app",description:"Explorer is the GUI frontend for TrueBlocks ",content:'\u003cp\u003eFirst, make sure that you have the \u003ccode\u003echifra-core\u003c/code\u003e backend up and running,\nthen run the application from \u003ca href="https://github.com/TrueBlocks/trueblocks-explorer"\u003ea clone of the explorer repo\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="before-you-begin"\u003eBefore you begin\u003c/h2\u003e\n\u003cp\u003e☑ Set up the trueblocks backend using the \u003ca href="/docs/prologue/installing-trueblocks"\u003echifra installation instructions\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e☑ In a terminal window, run the command \u003ccode\u003echifra serve\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id="install"\u003eInstall\u003c/h2\u003e\n\u003cp\u003eKeep the \u003ccode\u003echifra serve\u003c/code\u003e process running.\u003c/p\u003e\n\u003cp\u003eThen, in a new terminal, run these commands:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003egit clone git@github.com:TrueBlocks/trueblocks-explorer.git\u003c/li\u003e\n\u003cli\u003ecd trueblocks-explorer\u003c/li\u003e\n\u003cli\u003ecp .env.example .env\u003c/li\u003e\n\u003cli\u003eyarn\u003c/li\u003e\n\u003cli\u003eyarn develop\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOpen your browser, and access the app from \u003ccode\u003elocalhost:1234\u003c/code\u003e.\u003c/p\u003e\n'}).add({id:5,href:"/docs/chifra/introducing-chifra/",title:"Introducing Chifra",description:"First introduction to chifra",content:'\u003cp\u003eSimilar to \u003ccode\u003egit\u003c/code\u003e, TrueBlocks has an overarching command called \u003ccode\u003echifra\u003c/code\u003e that gives you access to all of the other subcommands.\u003c/p\u003e\n\u003cp\u003eType:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will see a long list of commands similar to this\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-txt"\u003e  Usage:    chifra command\n  Purpose:  Access to all TrueBlocks tools (chifra \u0026lt;cmd\u0026gt; --help for more).\n\n  Where:\n         ACCOUNTS\n           list          list every appearance of an address anywhere on the chain\n           export        export full detail of transactions for one or more addresses\n           monitors      add, remove, clean, and list address monitors\n           names         query addresses or names of well known accounts\n           abis          fetches the ABI for a smart contract\n         CHAIN DATA\n           blocks        retrieve one or more blocks from the chain or local cache\n           transactions  retrieve one or more transactions from the chain or local cache\n           receipts      retrieve receipts for the given transaction(s)\n           logs          retrieve logs for the given transaction(s)\n           traces        retrieve traces for the given transaction(s)\n           when          find block(s) based on date, blockNum, timestamp, or \'special\'\n         CHAIN STATE\n           state         retrieve account balance(s) for one or more addresses at given block(s)\n           tokens        retrieve token balance(s) for one or more addresses at given block(s)\n         ADMIN\n           status        report on the status of the TrueBlocks system\n           serve         serve the TrueBlocks API using the flame server\n           scrape        scan the chain and update the TrueBlocks index of appearances\n           init          initialize the index of appearances by downloading Bloom filters\n           pins          manage pinned index of appearances and associated Bloom filters\n         OTHER\n           quotes        freshen and/or display Ethereum price data\n           explore       open an explorer for a given address, block, or transaction\n           slurp         fetch data from EtherScan for any address\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\u003cp\u003eYou may get more help on any command by typing \u003ccode\u003echifra \u0026lt;cmd\u0026gt; --help\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="getting-status"\u003eGetting status\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s look at an easy command to get started called \u003ccode\u003estatus\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra status --terse\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you get a valid response, congratulations, your installation is working. You may skip ahead to the \u0026lsquo;Using TrueBlocks\u0026rsquo; section below.\u003c/p\u003e\n\u003ch3 id="---troubleshooting"\u003e\u0026ndash; Troubleshooting\u003c/h3\u003e\n\u003cp\u003eDepending on your setup, you may get the following error message when you run some \u003ccode\u003echifra\u003c/code\u003e commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003e  Warning: A request to your Ethereum node (http://localhost:8545) resulted\n  in the following error [Could not connect to server]. Specify a valid\n  rpcProvider by editing $CONFIG/trueblocks.toml.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you get this error, edit the configuration file mentioned. The file is well documented, so refer to that file for further information.\u003c/p\u003e\n\u003cp\u003eWhen the \u003ccode\u003echifra status\u003c/code\u003e command returns a valid response, you may move to the next section. If\nyou continue to have trouble, join our \u003ca href="https://discord.gg/kAFcZH2x7K"\u003ediscord disscussion\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="using-chifra"\u003eUsing chifra\u003c/h2\u003e\n\u003cp\u003eIf you\u0026rsquo;ve gotten this far, you\u0026rsquo;re ready to use TrueBlocks.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s try another simple command to show Ethereum block data. This command shows every 10th block between the first and the 100,000th.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra blocks 0-100000:10\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHit \u003ccode\u003eControl+C\u003c/code\u003e to stop the processing.\u003c/p\u003e\n\u003cp\u003eThis shows one of the basic ideas behind TrueBlocks: make the Ethereum data easier to use.\u003c/p\u003e\n\u003cp\u003ePlay around with other options. See what you can do.\u003c/p\u003e\n\u003ch2 id="conclusion"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eBy this point, you should have TrueBlocks properly installed and be able to get simple blockchain data from your node. All of the chifra commands should now work. The next section further introduces you to \u003ccode\u003echifra\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePlease see the \u003ca href="/docs/chifra/using-chifra/"\u003eUsing Chifra\u003c/a\u003e page to proceed.\u003c/p\u003e\n'}).add({id:6,href:"/docs/chifra/using-chifra/",title:"Some Chifra Examples",description:"How to use TrueBlocks to get useful data",content:'\u003cp\u003eA few more examples in more detail.\u003c/p\u003e\n\u003ch2 id="getting-help"\u003eGetting Help\u003c/h2\u003e\n\u003cp\u003eEvery \u003ccode\u003echifra\u003c/code\u003e sub-command comes with an associated help page. To get help for \u003ccode\u003echifra\u003c/code\u003e itself, simply type\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA long list of commands should show. (If you have trouble, see the \u003ca href="/docs/prologue/installing-trueblocks/"\u003eInstallation\u003c/a\u003e page.)\u003c/p\u003e\n\u003cp\u003eTo get help for a specific command, type\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra \u0026lt;cmd\u0026gt; --help\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo get more detailed help, type\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra \u0026lt;cmd\u0026gt; --help --verbose 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="getting-system-status"\u003eGetting System Status\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra\u003c/code\u003e command gives you access to all of TrueBlocks\' functionality. Get system status by typing\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra status --terse\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="getting-blockchain-data"\u003eGetting Blockchain Data\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s see if we can get some actual blockchain data.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGetting Blocks\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe following command returns block data from block 2,001,002. The data is returned as JSON.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra blocks 2001002\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the full transactional details are included for each of the seven transactions in the block. You can show just the transaction hashes with\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra blocks 2001002 --hashes\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy one of those transaction hashes and paste it into the next command\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra transactions 0x5f965c...9f26e12  # use the full hash\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command shows a single transaction\u0026rsquo;s data. But, you may have noticed that the data is shown as tab separated rows. In general, block data (which is structured) is presented as JSON while primarily non-structured data is presented as TXT.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFormatting Output\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eEvery \u003ccode\u003echifra\u003c/code\u003e command accepts a few optional parameters including \u003ccode\u003e--verbose\u003c/code\u003e and \u003ccode\u003e--fmt\u003c/code\u003e. \u003ccode\u003e--verbose\u003c/code\u003e is useful when debugging. The \u003ccode\u003e--fmt\u003c/code\u003e option allows you to specify the format of the output. It accepts three values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra blocks 2002 --fmt json   # the default for blocks\nchifra blocks 2002 --fmt txt    # tab delimited text\nchifra blocks 2002 --fmt csv    # comma separated values\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese options are available for all \u003ccode\u003echifra\u003c/code\u003e commands. (Although in some cases, they are ignored.) One might wish to use the \u003ccode\u003ecsv\u003c/code\u003e and \u003ccode\u003etxt\u003c/code\u003e options if one is engaged in data science for example.\u003c/p\u003e\n\u003ch2 id="more-data-commands"\u003eMore Data Commands\u003c/h2\u003e\n\u003cp\u003eBelow, we present a few of the other \u003ccode\u003echifra\u003c/code\u003e commands without a lot of description.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTransactions and Logs and Traces, Oh My!\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003e# The first transaction in block 2,002,002\nchifra transactions 2001002.0\n\n# All transactions in block 2,002,002 as comma separated values\nchifra transactions --fmt csv 2001002.\\*\n\n# Every event in block 4,503,002\nchifra logs --fmt json 4503002.\\*\n\n# Every event in block 4,503,002 -- articulated (see below)\nchifra logs --fmt json --articulate 4503002.\\*\n\n# Every trace in the second transaction of block 4,503,002\nchifra traces --fmt json --articulate 4503002.1\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePlease see the help files for \u003ccode\u003echifra blocks --help\u003c/code\u003e and \u003ccode\u003echifra transactions --help\u003c/code\u003e for more information, including all the options for specifying blocks and transactions (which are many and varied).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eArticulated Data\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMost TrueBlocks\' commands accept an option called \u003ccode\u003e--articulate\u003c/code\u003e. The easiest way to explain \u003ccode\u003earticulated data\u003c/code\u003e is to say it is \u0026ldquo;ugly blockchain data turned into human readable text\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFor example, the following command shows logs from the third transaction in block 4,503,002\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra logs --fmt json 4503002.2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePretty ugly. Compare that to this command\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-shell"\u003echifra logs --fmt json --articulate 4503002.2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou\u0026rsquo;ll see additional (and much more easy to understand) data. In particular, you\u0026rsquo;ll see an \u003ccode\u003earticulatedLog\u003c/code\u003e. That is \u0026ldquo;ugly log data presented in human-readable form.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eSee \u003ca href="/blog/recipe-getting-erc20-transfer-events/"\u003eGetting ERC20 Transfer Events\u003c/a\u003e for an example of using articulation.\u003c/p\u003e\n\u003ch2 id="links-to-more-detail"\u003eLinks to more detail\u003c/h2\u003e\n\u003cp\u003eThere are many other \u003ccode\u003echifra\u003c/code\u003e commands including \u003ccode\u003elist\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e that we still study next. Other commands allow you to \u003ccode\u003eserve\u003c/code\u003e a JSON API presenting each command as an API route, \u003ccode\u003einit\u003c/code\u003e which pulls parts of the index data from IPFS, and \u003ccode\u003escrape\u003c/code\u003e which builds the index.\u003c/p\u003e\n\u003cp\u003eIn the following sections, each command is presented with its options and in more detail. In addition,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOur \u003ca href="/blog/recipes"\u003eblog has a few longer \u0026ldquo;recipes\u0026rdquo;\u003c/a\u003efor accomplishing various tasks.\u003c/li\u003e\n\u003cli\u003eOur \u003ca href="/data-model/intro/intro/"\u003edata model reference\u003c/a\u003e describes the fields that are returned with each command\u003c/li\u003e\n\u003c/ul\u003e\n'}).add({id:7,href:"/docs/chifra/accounts/",title:"Accounts",description:"",content:'\u003cp\u003eThis group of commands is at the heart of TrueBlocks. They allow you to produce and analyze transactional histories for a given Ethereum address.\u003c/p\u003e\n\u003cp\u003eYou may also name addresses; grab the ABI file for a given address; add, delete, and remove monitors, and, most importantly, export transactional histories to various formats,\nThis includes re-directing output to remote or local databases.\u003c/p\u003e\n\u003ch2 id="chifra-list"\u003echifra list\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra list\u003c/code\u003e takes one or more addresses, queries the index of appearances, and builds TrueBlocks monitors. A TrueBlocks monitor is a file that contains blockNumber.transactionId pairs (transaction identifiers) representing the history of the address.\u003c/p\u003e\n\u003cp\u003eBecuase TrueBlocks only extracts data from the Ethereum node when it\u0026rsquo;s requested, the first time you list an address it takes about a minute. Subsequent queries are much faster because TrueBlocks caches the results.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003echifra list\u003c/code\u003e only queries the index, it does not extract the full transactional details. You may use \u003ccode\u003echifra export\u003c/code\u003e for that.\u003c/p\u003e\n\u003ch3 id="usage"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra list \u0026lt;address\u0026gt; [address\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  List appearances for the given address(es).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eaddrs\u003c/td\u003e\n\u003ctd\u003eone or more addresses (0x\u0026hellip;) to export (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐v\u003c/td\u003e\n\u003ctd\u003e‐‐verbose\u003c/td\u003e\n\u003ctd\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐h\u003c/td\u003e\n\u003ctd\u003e‐‐help\u003c/td\u003e\n\u003ctd\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaddresses\u003c/code\u003e must start with \u0026lsquo;0x\u0026rsquo; and be forty two characters long.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/acctExport"\u003e\u003ccode\u003eapps/acctExport\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-export"\u003echifra export\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra export\u003c/code\u003e tools provides a major part of the functionality of the TrueBlocks system. Using the index of appearances created with \u003ccode\u003echifra scrape\u003c/code\u003e and the list of transaction identifiers created with \u003ccode\u003echifra list\u003c/code\u003e, \u003ccode\u003echifra export\u003c/code\u003e completes the actual extraction of an address\u0026rsquo;s transactional history from the node.\u003c/p\u003e\n\u003cp\u003eYou may use \u003ccode\u003etopics\u003c/code\u003e, \u003ccode\u003efourbyte\u003c/code\u003e values at the start of a transaction\u0026rsquo;s input data, and/or a log\u0026rsquo;s \u003ccode\u003esource address\u003c/code\u003e or \u003ccode\u003eemitter\u003c/code\u003e to filter the results.\u003c/p\u003e\n\u003cp\u003eYou may also choose which portions of the Ethereum data structures (\u003ccode\u003e--transactions\u003c/code\u003e, \u003ccode\u003e--logs\u003c/code\u003e, \u003ccode\u003e--traces\u003c/code\u003e, etc.) as you wish.\u003c/p\u003e\n\u003cp\u003eBy default, the results of the extraction are delivered to your console, however, you may export the results to any database (with a little bit of work). The format of the data, its content and its destination are up to you.\u003c/p\u003e\n\u003ch3 id="usage-1"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra export [-p|-r|-A|-l|-t|-C|-a|-i|-R|-y|-U|-c|-e|-v|-h] \u0026lt;address\u0026gt; [address\u0026hellip;] [topics] [fourbytes]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Export full detail of transactions for one or more addresses.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eaddrs\u003c/td\u003e\n\u003ctd nowrap\u003eone or more addresses (0x\u0026hellip;) to export (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003etopics\u003c/td\u003e\n\u003ctd nowrap\u003efilter by one or more log topics (only for \u0026ndash;logs option)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003efourbytes\u003c/td\u003e\n\u003ctd nowrap\u003efilter by one or more fourbytes (only for transactions\u003cbr/\u003eand trace options)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐appearances\u003c/td\u003e\n\u003ctd nowrap\u003eexport a list of appearances\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐r\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐receipts\u003c/td\u003e\n\u003ctd nowrap\u003eexport receipts instead of transaction list\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐A\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐statements\u003c/td\u003e\n\u003ctd nowrap\u003efor use with \u0026ndash;accounting option only, export only\u003cbr/\u003ereconciliation statements\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐l\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐logs\u003c/td\u003e\n\u003ctd nowrap\u003eexport logs instead of transaction list\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐traces\u003c/td\u003e\n\u003ctd nowrap\u003eexport traces instead of transaction list\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐C\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐accounting\u003c/td\u003e\n\u003ctd nowrap\u003eexport accounting records instead of transaction list\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐articulate\u003c/td\u003e\n\u003ctd nowrap\u003earticulate transactions, traces, logs, and outputs\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐i\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐cache_txs\u003c/td\u003e\n\u003ctd nowrap\u003ewrite transactions to the cache (see notes)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐R\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐cache_traces\u003c/td\u003e\n\u003ctd nowrap\u003ewrite traces to the cache (see notes)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐y\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐factory\u003c/td\u003e\n\u003ctd nowrap\u003escan for contract creations from the given address(es)\u003cbr/\u003eand report address of those contracts\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐emitter\u003c/td\u003e\n\u003ctd nowrap\u003efor log export only, export only if one of the given\u003cbr/\u003eexport addresses emitted the event\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐source string\u003c/td\u003e\n\u003ctd nowrap\u003efor log export only, export only one of these addresses\u003cbr/\u003eemitted the event\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐relevant\u003c/td\u003e\n\u003ctd nowrap\u003efor log and accounting export only, if true export\u003cbr/\u003eonly logs relevant to one of the given export addresses\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐U\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐count\u003c/td\u003e\n\u003ctd nowrap\u003eonly available for \u0026ndash;appearances mode, if present return\u003cbr/\u003eonly the number of records\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐c\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐first_record \u0026lt;num\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003ethe first record to process\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐max_records \u0026lt;num\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003ethe maximum number of records to process before reporting\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐clean\u003c/td\u003e\n\u003ctd nowrap\u003eclean (i.e. remove duplicate appearances) from all\u003cbr/\u003eexisting monitors\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn \u003ccode\u003eaddress\u003c/code\u003e must start with \u0026lsquo;0x\u0026rsquo; and be forty-two characters long.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eConfigurable Items:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecache_txs\u003c/code\u003e: write transactions to the cache (see notes).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecache_traces\u003c/code\u003e: write traces to the cache (see notes).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eskip_ddos\u003c/code\u003e: toggle skipping over 2016 dDos transactions (\u0026lsquo;on\u0026rsquo; by default).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emax_traces\u003c/code\u003e: if \u0026ndash;skip_ddos is on, this many traces defines what a ddos transaction\nis (default = 250).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/acctExport"\u003e\u003ccode\u003eapps/acctExport\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-monitors"\u003echifra monitors\u003c/h2\u003e\n\u003cp\u003eA TrueBlock monitor is simply a file on your computer that represents the transactional history of a given Ethereum address. Monitors do not exist until you indicate your interest in a certain address. (See \u003ccode\u003echifra list\u003c/code\u003e.)\u003c/p\u003e\n\u003cp\u003eYou may use the \u003ccode\u003e--delete\u003c/code\u003e command to delete (or undelete if already deleted) an address. The monitor is not removed from your computer if you delete it. It is just marked as deleted making it invisible to the TrueBlocks explorer.\u003c/p\u003e\n\u003cp\u003eUse the \u003ccode\u003e--remove\u003c/code\u003e command to permanently remove a monitor from your computer. This is an irreversable operation.\u003c/p\u003e\n\u003ch3 id="usage-2"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra monitors [-d|-r|-v|-h] \u0026lt;address\u0026gt; [address\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Delete, undelete, and remove previously created monitors.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003eaddrs\u003c/td\u003e\n\u003ctd\u003eone or more addresses (0x\u0026hellip;) to export (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e‐‐delete\u003c/td\u003e\n\u003ctd\u003edelete a previously created monitor (or undelete if already deleted)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e‐‐remove\u003c/td\u003e\n\u003ctd\u003eremove a previously deleted monitor\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐v\u003c/td\u003e\n\u003ctd\u003e‐‐verbose\u003c/td\u003e\n\u003ctd\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐h\u003c/td\u003e\n\u003ctd\u003e‐‐-help\u003c/td\u003e\n\u003ctd\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaddresses\u003c/code\u003e must start with \u0026lsquo;0x\u0026rsquo; and be forty two characters long.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/acctExport"\u003e\u003ccode\u003eapps/acctExport\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-names"\u003echifra names\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra names\u003c/code\u003e is a surprisingly useful tool. It allows one to associate textual names with Ethereum addresses. One may ask why this is necessary given that ENS exists. The answer is a single word: \u0026ldquo;privacy\u0026rdquo;. ENS names are public. In many cases, users desire to keep personal addresses private. Try to do this on a website.\u003c/p\u003e\n\u003cp\u003eLike \u003ccode\u003echifra abis\u003c/code\u003e, this tool is useful from the command line but is primarily used in support of other tools, especially \u003ccode\u003echifra export\u003c/code\u003e where naming addresses becomes the single best way to turn unintellagable blockchain data into understandable information.\u003c/p\u003e\n\u003cp\u003eThe various options allow you to search and filter the results. The \u003ccode\u003ecollections\u003c/code\u003e and \u003ccode\u003etags\u003c/code\u003e options are used primarily by the TrueBlocks explorer.\u003c/p\u003e\n\u003cp\u003eYou may use the TrueBlocks explorer to manage (add, edit, delete) address-name associations.\u003c/p\u003e\n\u003ch3 id="usage-3"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra names [-e|-m|-l|-c|-p|-n|-a|-s|-g|-v|-h] \u0026lt;term\u0026gt; [term\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Query addresses or names of well known accounts.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eterms\u003c/td\u003e\n\u003ctd nowrap\u003ea space separated list of one or more search terms\u003cbr/\u003e(required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐expand\u003c/td\u003e\n\u003ctd nowrap\u003eexpand search to include all fields (default searches\u003cbr/\u003ename, address, and symbol only)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐m\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐match_case\u003c/td\u003e\n\u003ctd nowrap\u003edo case-sensitive search\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐l\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐all\u003c/td\u003e\n\u003ctd nowrap\u003einclude all accounts in the search\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐c\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐custom\u003c/td\u003e\n\u003ctd nowrap\u003einclude your custom named accounts\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐prefund\u003c/td\u003e\n\u003ctd nowrap\u003einclude prefund accounts\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐n\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐named\u003c/td\u003e\n\u003ctd nowrap\u003einclude well know token and airdrop addresses in the\u003cbr/\u003esearch\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐addr\u003c/td\u003e\n\u003ctd nowrap\u003edisplay only addresses in the results (useful for scripting)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐s\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐collections\u003c/td\u003e\n\u003ctd nowrap\u003edisplay collections data\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐g\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐tags\u003c/td\u003e\n\u003ctd nowrap\u003eexport the list of tags and subtags only\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe tool will accept up to three terms, each of which must match against any field in the database.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e--match_case\u003c/code\u003e option enables case sensitive matching.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/ethNames"\u003e\u003ccode\u003etools/ethNames\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-abis"\u003echifra abis\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra abis\u003c/code\u003e retrieves a smart contract\u0026rsquo;s ABI file either from the current local folder, from the TrueBlocks cache, from \u003ca href="http://etherscan.io"\u003eEtherscan\u003c/a\u003e, or (in the future) from ENS and Sourcify.\u003c/p\u003e\n\u003cp\u003eWhile this tool may be used from the command line or the API, its primary use is in support of the \u003ccode\u003e--articulate\u003c/code\u003e option of other tools such as \u003ccode\u003echifra export\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--known\u003c/code\u003e option prints a list of standard and semi-standard function signatures such as the ERC20 standard, various OpenZeppelin functions, the base and pair Uniswap functions, etc.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--find\u003c/code\u003e option is experimental. It scans a cross of approx. 100,000 function names with approx. 700 function signatures, generating at each cross a four byte signature and looking for a match to the provided fourbyte. Very infrequently, this tool will find a match for an otherwise unknown fourbyte string.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--sol\u003c/code\u003e option will convert a single Solidity file found in the current folder into an ABI.\u003c/p\u003e\n\u003ch3 id="usage-4"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra abis [-k|-s|-f|-v|-h] \u0026lt;address\u0026gt; [address\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Fetches the ABI for a smart contract.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eaddrs\u003c/td\u003e\n\u003ctd nowrap\u003elist of one or more smart contracts whose ABI to grab\u003cbr/\u003efrom EtherScan (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐k\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐known\u003c/td\u003e\n\u003ctd nowrap\u003eload common \u0026lsquo;known\u0026rsquo; ABIs from cache\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐s\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐sol string\u003c/td\u003e\n\u003ctd nowrap\u003efile name of .sol file from which to create a new known\u003cbr/\u003eabi (without .sol)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐f\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐find string\u003c/td\u003e\n\u003ctd nowrap\u003etry to search for a function declaration given a four\u003cbr/\u003ebyte code\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSolidity files found in the local folder with the name \u0026lsquo;\u003caddress\u003e.sol\u0026rsquo; are converted to an ABI prior to processing (and then removed).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/grabABI"\u003e\u003ccode\u003etools/grabABI\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n'}).add({id:8,href:"/docs/chifra/chaindata/",title:"Chain Data",description:"",content:'\u003cp\u003eThe chaindata tools extract raw blockchain data directly from the node.\nYou may extract block data, transactional data, receipts, logs, and traces.\nEach tool has it own set of options, allowing you to get exactly the data that\nyou want.\u003c/p\u003e\n\u003ch2 id="chifra-blocks"\u003echifra blocks\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra blocks\u003c/code\u003e tool retrieves block data from your Ethereum node or, if previously cached, from the TrueBlocks cache. You may specify multiple blocks per invocation.\u003c/p\u003e\n\u003cp\u003eBy default, \u003ccode\u003echifra blocks\u003c/code\u003e queries the full transactional details of the block (including receipts). You may optionally retreive only the transaction hashes in the block (which is signifcantly faster). Additionally, you may also use this tool to retrieve uncle blocks at a give height.\u003c/p\u003e\n\u003cp\u003eAnother useful feature of \u003ccode\u003echifra blocks\u003c/code\u003e is the ability to extract address appearances from a block. TrueBlocks uses a similar feature internally to build its index of appearances. This type of data is very insightful when studying end user behaviour and chain-wide adoption analysis.\u003c/p\u003e\n\u003ch3 id="usage"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra blocks [-e|-U|-t|-a|-u|-n|-c|-o|-v|-h] \u0026lt;block\u0026gt; [block\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve one or more blocks from the chain or local cache.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eblocks\u003c/td\u003e\n\u003ctd nowrap\u003ea space-separated list of one or more block identifiers\u003cbr/\u003e(required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐hashes\u003c/td\u003e\n\u003ctd nowrap\u003edisplay only transaction hashes, default is to display\u003cbr/\u003efull transaction detail\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐U\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐uncles\u003c/td\u003e\n\u003ctd nowrap\u003edisplay uncle blocks (if any) instead of the requested\u003cbr/\u003eblock\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐trace\u003c/td\u003e\n\u003ctd nowrap\u003eexport the traces from the block as opposed to the\u003cbr/\u003eblock data\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐apps\u003c/td\u003e\n\u003ctd nowrap\u003edisplay only the list of address appearances in the\u003cbr/\u003eblock\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐u\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐uniq\u003c/td\u003e\n\u003ctd nowrap\u003edisplay only the list of uniq address appearances in\u003cbr/\u003ethe block\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐n\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐uniq_tx\u003c/td\u003e\n\u003ctd nowrap\u003edisplay only the list of uniq address appearances in\u003cbr/\u003eeach transaction\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐c\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐count\u003c/td\u003e\n\u003ctd nowrap\u003edisplay the number of the lists of appearances for\u003cbr/\u003e\u0026ndash;apps, \u0026ndash;uniq, or \u0026ndash;uniq_tx\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐o\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐cache\u003c/td\u003e\n\u003ctd nowrap\u003eforce a write of the block to the cache\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eblocks\u003c/code\u003e is a space-separated list of values, a start-end range, a \u003ccode\u003especial\u003c/code\u003e, or any combination.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eblocks\u003c/code\u003e may be specified as either numbers or hashes.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003especial\u003c/code\u003e blocks are detailed under \u003ccode\u003echifra when --list\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getBlocks"\u003e\u003ccode\u003etools/getBlocks\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-transactions"\u003echifra transactions\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra transactions\u003c/code\u003e tool retrieves transactions directly from the Ethereum node (using the \u003ccode\u003e--raw\u003c/code\u003e option) or from the TrueBlocks cache (if present). You may specify multiple transaction identifiers per invocation. Unlike the Ethereum RPC, the reported transactions include the transaction\u0026rsquo;s receipt and generated logs.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--articulate\u003c/code\u003e option fetches the ABI from each encountered smart contract (including those encountered in a trace\u0026ndash;if the \u003ccode\u003e--trace\u003c/code\u003e option is enabled) to better describe the reported data.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--trace\u003c/code\u003e option attachs an array transaction traces to the output (if the node you\u0026rsquo;re querying has \u0026ndash;tracing enabled), while the \u003ccode\u003e--uniq\u003c/code\u003e option displays a list of uniq address appearances instead of the underlying data (including uniq addresses in traces if enabled).\u003c/p\u003e\n\u003ch3 id="usage-1"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra transactions [-a|-t|-u|-r|-o|-v|-h] \u0026lt;tx_id\u0026gt; [tx_id\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve one or more transactions from the chain or local cache.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003etransactions\u003c/td\u003e\n\u003ctd nowrap\u003ea space-separated list of one or more transaction identifiers\u003cbr/\u003e(required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐articulate\u003c/td\u003e\n\u003ctd nowrap\u003earticulate the retrieved data if ABIs can be found\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐trace\u003c/td\u003e\n\u003ctd nowrap\u003einclude the transaction\u0026rsquo;s traces in the results\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐u\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐uniq\u003c/td\u003e\n\u003ctd nowrap\u003edisplay a list of uniq addresses found in the transaction\u003cbr/\u003einstead of the underlying data\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐r\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐reconcile \u0026lt;address\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003ereconcile the transaction as per the provided address\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐o\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐cache\u003c/td\u003e\n\u003ctd nowrap\u003eforce the results of the query into the tx cache (and\u003cbr/\u003ethe trace cache if applicable)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003etransactions\u003c/code\u003e list may be one or more space-separated identifiers which are either a transaction hash,\na blockNumber.transactionID pair, or a blockHash.transactionID pair, or any combination.\u003c/li\u003e\n\u003cli\u003eThis tool checks for valid input syntax, but does not check that the transaction requested actually exists.\u003c/li\u003e\n\u003cli\u003eIf the queried node does not store historical state, the results for most older transactions are undefined.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getTrans"\u003e\u003ccode\u003etools/getTrans\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-receipts"\u003echifra receipts\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra receipts\u003c/code\u003e returns the given transaction\u0026rsquo;s receipt. You may specify multiple transaction identifiers per invocation.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--articulate\u003c/code\u003e option fetches the ABI from each encountered smart contract (including those encountered in a trace\u0026ndash;if the \u003ccode\u003e--trace\u003c/code\u003e option is enabled) to better describe the reported data.\u003c/p\u003e\n\u003cp\u003eGenerally speaking, this tool is less useful than others as you may report the same data using \u003ccode\u003echifra transactions\u003c/code\u003e and more focused data using \u003ccode\u003echifra logs\u003c/code\u003e. It is included here for completeness, as the \u003ccode\u003ereceipt\u003c/code\u003e is a fundamental data structure in Ethereum.\u003c/p\u003e\n\u003ch3 id="usage-2"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra receipts [-a|-v|-h] \u0026lt;tx_id\u0026gt; [tx_id\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve receipts for the given transaction(s).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003etransactions\u003c/td\u003e\n\u003ctd nowrap\u003ea space-separated list of one or more transaction identifiers\u003cbr/\u003e(required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐articulate\u003c/td\u003e\n\u003ctd nowrap\u003earticulate the retrieved data if ABIs can be found\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003etransactions\u003c/code\u003e list may be one or more space-separated identifiers which are either a transaction hash,\na blockNumber.transactionID pair, or a blockHash.transactionID pair, or any combination.\u003c/li\u003e\n\u003cli\u003eThis tool checks for valid input syntax, but does not check that the transaction requested actually exists.\u003c/li\u003e\n\u003cli\u003eIf the queried node does not store historical state, the results for most older transactions are undefined.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getReceipts"\u003e\u003ccode\u003etools/getReceipts\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-logs"\u003echifra logs\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra logs\u003c/code\u003e returns the given transaction\u0026rsquo;s logs. You may specify multiple transaction identifiers per invocation.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--articulate\u003c/code\u003e option fetches the ABI from each encountered smart contract to better describe the reported data. The \u003ccode\u003e--topic\u003c/code\u003e and \u003ccode\u003e--source\u003c/code\u003e options allow you to filter your results.\u003c/p\u003e\n\u003ch3 id="usage-3"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra logs [-t|-s|-a|-v|-h] \u0026lt;tx_id\u0026gt; [tx_id\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve logs for the given transaction(s).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003etransactions\u003c/td\u003e\n\u003ctd nowrap\u003ea space-separated list of one or more transaction identifiers\u003cbr/\u003e(required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐topic string\u003c/td\u003e\n\u003ctd nowrap\u003efilter by one or more log topics (not implemented)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐s\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐source string\u003c/td\u003e\n\u003ctd nowrap\u003eexport only if the given address emitted the event\u003cbr/\u003e(not implemented)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐articulate\u003c/td\u003e\n\u003ctd nowrap\u003earticulate the retrieved data if ABIs can be found\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003etransactions\u003c/code\u003e list may be one or more space-separated identifiers which are either a transaction hash,\na blockNumber.transactionID pair, or a blockHash.transactionID pair, or any combination.\u003c/li\u003e\n\u003cli\u003eThis tool checks for valid input syntax, but does not check that the transaction requested actually exists.\u003c/li\u003e\n\u003cli\u003eIf the queried node does not store historical state, the results for most older transactions are undefined.\u003c/li\u003e\n\u003cli\u003eIf you specify a 32-byte hash, it will be assumed to be a transaction hash, if the transaction is\nnot found, it will be used as a topic.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getLogs"\u003e\u003ccode\u003etools/getLogs\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-traces"\u003echifra traces\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra traces\u003c/code\u003e tool retrieves a transaction\u0026rsquo;s traces. You may specify multiple transaction identifiers per invocation.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--articulate\u003c/code\u003e option fetches the ABI from each encountered smart contract to better describe the reported data.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--filter\u003c/code\u003e option calls your node\u0026rsquo;s \u003ccode\u003etrace_filter\u003c/code\u003e routine (if available) using a bang-separated string of the same values used by \u003ccode\u003etrace_fitler\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="usage-4"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra traces [-a|-f|-d|-c|-v|-h] \u0026lt;tx_id\u0026gt; [tx_id\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve traces for the given transaction(s).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003etransactions\u003c/td\u003e\n\u003ctd nowrap\u003ea space-separated list of one or more transaction identifiers\u003cbr/\u003e(required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐articulate\u003c/td\u003e\n\u003ctd nowrap\u003earticulate the retrieved data if ABIs can be found\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐f\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐filter string\u003c/td\u003e\n\u003ctd nowrap\u003ecall the node\u0026rsquo;s trace_filter routine with bang-seperated\u003cbr/\u003efilter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐d\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐statediff\u003c/td\u003e\n\u003ctd nowrap\u003eexport state diff traces (not implemented)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐c\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐count\u003c/td\u003e\n\u003ctd nowrap\u003eshow the number of traces for the transaction only\u003cbr/\u003e(fast)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003etransactions\u003c/code\u003e list may be one or more space-separated identifiers which are either a transaction hash,\na blockNumber.transactionID pair, or a blockHash.transactionID pair, or any combination.\u003c/li\u003e\n\u003cli\u003eThis tool checks for valid input syntax, but does not check that the transaction requested actually exists.\u003c/li\u003e\n\u003cli\u003eIf the queried node does not store historical state, the results for most older transactions are undefined.\u003c/li\u003e\n\u003cli\u003eA bang seperated filter has the following fields (at least one of which is required) and is separated\nwith a bang (!): fromBlk, toBlk, fromAddr, toAddr, after, count.\u003c/li\u003e\n\u003cli\u003eA state diff trace describes, for each modified address, what changed during that trace.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eConfigurable Items:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eskip_ddos\u003c/code\u003e: skip over the 2016 ddos during export (\u0026lsquo;on\u0026rsquo; by default).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emax\u003c/code\u003e: if \u0026ndash;skip_ddos is on, this many traces defines what a ddos transaction is (default = 250).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getTraces"\u003e\u003ccode\u003etools/getTraces\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-when"\u003echifra when\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra when\u003c/code\u003e tool answers one of two questions: (1) \u0026ldquo;At what date and time did a given block occur?\u0026rdquo; or (2) \u0026ldquo;What block occurred at or before a given date and time?\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eIn the first case, supply a block number or hash and the date and time of that block are displayed. In the later case, supply a date (and optionally a time) and the block number that occurred at or just prior to that date is displayed.\u003c/p\u003e\n\u003cp\u003eThe values for \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e are specified in JSON format. \u003ccode\u003ehour\u003c/code\u003e/\u003ccode\u003eminute\u003c/code\u003e/\u003ccode\u003esecond\u003c/code\u003e are optional, and if omitted, default to zero in each case. Block numbers may be specified as either integers or hexidecimal number or block hashes. You may specify any number of dates and/or blocks per invocation.\u003c/p\u003e\n\u003ch3 id="usage-5"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra when [-l|-t|-v|-h] \u0026lt; block | date \u0026gt; [ block\u0026hellip; | date\u0026hellip; ]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Find block(s) based on date, blockNum, timestamp, or \u0026lsquo;special\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eblocks\u003c/td\u003e\n\u003ctd nowrap\u003eone or more dates, block numbers, hashes, or special\u003cbr/\u003enamed blocks (see notes) (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐l\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐list\u003c/td\u003e\n\u003ctd nowrap\u003eexport a list of the \u0026lsquo;special\u0026rsquo; blocks\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐timestamps\u003c/td\u003e\n\u003ctd nowrap\u003eignore other options and generate timestamps only\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe block list may contain any combination of \u003ccode\u003enumber\u003c/code\u003e, \u003ccode\u003ehash\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e, special \u003ccode\u003enamed\u003c/code\u003e blocks.\u003c/li\u003e\n\u003cli\u003eDates must be formatted in JSON format: YYYY-MM-DD[THH[:MM[:SS]]].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/whenBlock"\u003e\u003ccode\u003etools/whenBlock\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n'}).add({id:9,href:"/docs/chifra/chainstate/",title:"Chain State",description:"",content:'\u003cp\u003eThe two tools in this group deal with the \u003cem\u003eChain State\u003c/em\u003e.\nAs chain state data concerns balances and byte code.\nit is distinct from Chain Data, which concerns things like blocks, transactions,\nor traces.\u003c/p\u003e\n\u003cp\u003eThe two tools are \u003ccode\u003echifra state\u003c/code\u003e and \u003ccode\u003echifra tokens\u003c/code\u003e.\nThe first allows you to query account balances, the byte code of a smart contract (if available), the nonce, and other information about an address.\nThe second tool, \u003ccode\u003echifra tokens\u003c/code\u003e, deals with ERC20 and ERC721 token balances and other data.\u003c/p\u003e\n\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e👉\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eNote: The amount of information you can retrieve depends on the type of node you run. Archive nodes and tracing allow you to query historical state (that is, all the way back to the genesis block). TrueBlocks works with non-archive nodes, but they are much less informative.\u003c/div\u003e\n\u003c/div\u003e\n\u003ch2 id="chifra-state"\u003echifra state\u003c/h2\u003e\n\u003cp\u003eUse this tool to retrieve the balance of an address (or list of addresses) at the given block (or blocks). Specify multiple addresses and/or multiple blocks if you wish, but you must specify at least one address. If no block is specified, the latest block is reported.\u003c/p\u003e\n\u003cp\u003eYou may also query to see if an address is a smart contract as well as retrieve a contract\u0026rsquo;s byte code.\u003c/p\u003e\n\u003ch3 id="usage"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra state [-p|-c|-n|-v|-h] \u0026lt;address\u0026gt; [address\u0026hellip;] [block\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve account balance(s) for one or more addresses at given block(s).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eaddrs\u003c/td\u003e\n\u003ctd nowrap\u003eone or more addresses (0x\u0026hellip;) from which to retrieve\u003cbr/\u003ebalances (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eblocks\u003c/td\u003e\n\u003ctd nowrap\u003ean optional list of one or more blocks at which to\u003cbr/\u003ereport balances, defaults to \u0026lsquo;latest\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐parts \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003econtrol which state to export, one or more of [none,\u003cbr/\u003esome, all, balance, nonce, code, storage, deployed,\u003cbr/\u003eaccttype]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐c\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐changes\u003c/td\u003e\n\u003ctd nowrap\u003eonly report a balance when it changes from one block\u003cbr/\u003eto the next\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐n\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐no_zero\u003c/td\u003e\n\u003ctd nowrap\u003esuppress the display of zero balance accounts\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn \u003ccode\u003eaddress\u003c/code\u003e must start with \u0026lsquo;0x\u0026rsquo; and be forty-two characters long.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eblocks\u003c/code\u003e may be a space-separated list of values, a start-end range, a \u003ccode\u003especial\u003c/code\u003e, or any combination.\u003c/li\u003e\n\u003cli\u003eIf the queried node does not store historical state, the results are undefined.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003especial\u003c/code\u003e blocks are detailed under \u003ccode\u003echifra when --list\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebalance\u003c/code\u003e is the default mode. To select a single mode use \u003ccode\u003enone\u003c/code\u003e first, followed by that mode.\u003c/li\u003e\n\u003cli\u003eYou may specify multiple \u003ccode\u003emodes\u003c/code\u003e on a single line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getState"\u003e\u003ccode\u003etools/getState\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-tokens"\u003echifra tokens\u003c/h2\u003e\n\u003cp\u003eGiven the address of an ERC20 token contract, this tool reports token balances for one or more additional addresses. Alternatively, the tool can report the token balances for multiple ERC20 tokens for a single addresses.\u003c/p\u003e\n\u003cp\u003eIn normal operation the \u003cstrong\u003efirst item\u003c/strong\u003e in the \u003ccode\u003eaddress_list\u003c/code\u003e is assumed to be an ERC20 token contract whose balances are being queried, whereas the remainder of the list is assumed to be addresses on which to report.\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003e--byAcct\u003c/code\u003e mode, \u003cstrong\u003eall addresses\u003c/strong\u003e in the \u003ccode\u003eaddress_list\u003c/code\u003e are assumed to be ERC20 token contracts, except the final one which is the account whose token balances are reported.\u003c/p\u003e\n\u003cp\u003eYou may optionally specify one or more blocks at which to report. If no block is specified, the latest block is assumed. You may also optionally specify which parts of the token data to extract.\u003c/p\u003e\n\u003ch3 id="usage-1"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra tokens [-p|-b|-n|-v|-h] \u0026lt;address\u0026gt; \u0026lt;address\u0026gt; [address\u0026hellip;] [block\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Retrieve token balance(s) for one or more addresses at given block(s).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eaddrs\u003c/td\u003e\n\u003ctd nowrap\u003etwo or more addresses (0x\u0026hellip;), the first is an ERC20\u003cbr/\u003etoken, balances for the rest are reported (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eblocks\u003c/td\u003e\n\u003ctd nowrap\u003ean optional list of one or more blocks at which to\u003cbr/\u003ereport balances, defaults to \u0026lsquo;latest\u0026rsquo;\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐parts \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eone or more parts of the token information to retreive,\u003cbr/\u003eone or more of [name, symbol, decimals, totalSupply,\u003cbr/\u003eversion, none, all]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐b\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐by_acct\u003c/td\u003e\n\u003ctd nowrap\u003econsider each address an ERC20 token except the last,\u003cbr/\u003ewhose balance is reported for each token\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐n\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐no_zero\u003c/td\u003e\n\u003ctd nowrap\u003esuppress the display of zero balance accounts\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn \u003ccode\u003eaddress\u003c/code\u003e must start with \u0026lsquo;0x\u0026rsquo; and be forty-two characters long.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eblocks\u003c/code\u003e may be a space-separated list of values, a start-end range, a \u003ccode\u003especial\u003c/code\u003e, or any combination.\u003c/li\u003e\n\u003cli\u003eIf the token contract(s) from which you request balances are not ERC20 compliant, the results are undefined.\u003c/li\u003e\n\u003cli\u003eIf the queried node does not store historical state, the results are undefined.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003especial\u003c/code\u003e blocks are detailed under \u003ccode\u003echifra when --list\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getTokens"\u003e\u003ccode\u003etools/getTokens\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n'}).add({id:10,href:"/docs/chifra/admin/",title:"Admin",description:"",content:'\u003cp\u003eThe Admin component allows you to query the status of the TrueBlocks system. You may query the status; query for information about TrueBlocks caches; control the creation, sharing, and pinning of the TrueBlocks index of appearances; and even serve the data through an API. See our \u003ca href="/api"\u003eAPI documentation\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch2 id="chifra-status"\u003echifra status\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra status\u003c/code\u003e program allows you to manage the various TrueBlock caches. You may list all of the caches, some of the cache, or even individual caches either in terse or full detail. The cache of interest is specified with the \u003ccode\u003emodes\u003c/code\u003e option.\u003c/p\u003e\n\u003cp\u003eTrueBlocks maintains caches for the index of address appearances, named addresses, abi files, as well as other data including blockchain data, address monitors, and groups of address monitors called collections.\u003c/p\u003e\n\u003ch3 id="usage"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra status [-d|-t|-v|-h] \u0026lt;mode\u0026gt; [mode\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Report on the status of the TrueBlocks system.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003emodes\u003c/td\u003e\n\u003ctd nowrap\u003ethe type of status info to retrieve, one or more of\u003cbr/\u003e[index, monitors, collections, names, abis, caches,\u003cbr/\u003esome, all]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐d\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐details\u003c/td\u003e\n\u003ctd nowrap\u003einclude details about items found in monitors, slurps,\u003cbr/\u003eabis, or price caches\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐types \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003efor caches mode only, which type(s) of cache to report,\u003cbr/\u003eone or more of [blocks, transactions, traces, slurps,\u003cbr/\u003eprices, all]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/cacheStatus"\u003e\u003ccode\u003eapps/cacheStatus\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-serve"\u003echifra serve\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra serve\u003c/code\u003e delivers a JSON API for each of the \u003ccode\u003echifra\u003c/code\u003e commands along with each of its options. It does this through \u003ccode\u003eflame\u003c/code\u003e server which is written in Go.\u003c/p\u003e\n\u003cp\u003e\u003ca href="https://www.tokenomics.io/api.html"\u003eGet help with the API here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnother way to get help to run \u003ccode\u003echifra --help\u003c/code\u003e or \u003ccode\u003echifra \u0026lt;cmd\u0026gt; --help\u003c/code\u003e on your command line. See below for an example of converting command line options to a call to the API. There\u0026rsquo;s a one-to-one correspondence between the command line tools and options and the API routes and their options.\u003c/p\u003e\n\u003ch3 id="usage-1"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra serve\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Present each chifra command along with all of its options as a JSON api.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e‐‐port\u003c/td\u003e\n\u003ctd\u003especify the server\u0026rsquo;s port (default \u0026ldquo;:8080\u0026rdquo;)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐v\u003c/td\u003e\n\u003ctd\u003e‐‐verbose\u003c/td\u003e\n\u003ctd\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐h\u003c/td\u003e\n\u003ctd\u003e‐‐help\u003c/td\u003e\n\u003ctd\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo use the API, first open a new terminal window and run \u003ccode\u003echifra serve\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eInstead of the command line \u003ccode\u003echifra status index --details\u003c/code\u003e, run \u003ccode\u003ecurl \u0026quot;http://localhost:8080/status?modes=index\u0026amp;details\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTreat other commands similarly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/go-apps/flame"\u003e\u003ccode\u003ego-apps/flame\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-scrape"\u003echifra scrape\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra scrape\u003c/code\u003e application creates TrueBlocks\' index of address appearances \u0026ndash; the fundemental data structure of the entire system. It also, optionally, pins the index to IPFS.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003echifra scrape\u003c/code\u003e is a long running process, therefore we advise you run it as a service or in terminal multiplexer such as \u003ccode\u003etmux\u003c/code\u003e. It is possible to start and stop \u003ccode\u003echifra scrape\u003c/code\u003e as needed, but doing so means the scraper needs to catch up to the front of the chain, a process that may take some time depending on how frequently the scraper is run. See below for a more in depth explanation of how the scraping process works and prerequisites for it proper operation.\u003c/p\u003e\n\u003cp\u003eThe scraper can scrape either the index only, previously created monitors only, both, or neither. If you specify \u003ccode\u003enone\u003c/code\u003e, timestamps will be scraped but nothing else. If you\u0026rsquo;re scraping monitors, you may tell the system to cache traces and transactions. This will speed up access, but take addition hard drive space. You may also adjust the speed of operation on different machines with the \u003ccode\u003e--sleep\u003c/code\u003e and \u003ccode\u003e--n_blocks\u003c/code\u003e options. Finally, you may choose to optionally \u003ccode\u003e--pin\u003c/code\u003e each new chunk to IPFS.\u003c/p\u003e\n\u003ch3 id="usage-2"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra scrape [-p|-s|-v|-h]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Scan the chain and update the TrueBlocks index of appearances.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐pin\u003c/td\u003e\n\u003ctd nowrap\u003epin new chunks (and blooms) to IPFS (requires Pinata\u003cbr/\u003ekey and running IPFS node)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐s\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐sleep \u0026lt;double\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003ethe number of seconds to sleep between passes (default\u003cbr/\u003e14)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eConfigurable Items:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003en_blocks\u003c/code\u003e: maximum number of blocks to process (defaults to 5000).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003en_block_procs\u003c/code\u003e: number of concurrent block channels for blaze.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003en_addr_procs\u003c/code\u003e: number of concurrent address channels for blaze.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="explainer"\u003eexplainer\u003c/h3\u003e\n\u003cp\u003eEach time \u003ccode\u003echifra scrape\u003c/code\u003e runs, it begins at the last block it completed (plus one) and decends as deeply as it can into the block\u0026rsquo;s data. (This is why we need a \u003ccode\u003e--tracing\u003c/code\u003e node.) As address appearances are encountered, the system adds the appearance to a binary index. Periodically (at the end of the block containing the 2,000,000th appearance), the system consolidates a \u003cstrong\u003echunk\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eA \u003cstrong\u003echunk\u003c/strong\u003e is a portion of the index containing approximately 2,000,000 records. As part of the consolidation, the scraper creates a Bloom filter representing the chunk. The Bloom filters are an order of magnitude or more smaller than the chunks. The system then pushes both the chunk and the Bloom filter to IPFS. In this way, TrueBlocks creates an immutable, uncapturable index of appearances that can be used not only by TrueBlocks, but any member of the community who needs it. (Hint: we all need it.)\u003c/p\u003e\n\u003cp\u003eUsers of the \u003ca href="https://github.com/TrueBlocks/trueblocks-explorer"\u003eTrueBlocks Explorer\u003c/a\u003e (or any other software, for that matter) subsequently downloads the Bloom filters, queries them to determine which \u003cstrong\u003echunks\u003c/strong\u003e need to be downloaded to the user\u0026rsquo;s machine and thereby build a historical list of transacitons for a given address. This is accomplished while imposing a minimum amount of data on the end user\u0026rsquo;s machine.\u003c/p\u003e\n\u003cp\u003eIn future versions of the software, we will pin these shared chunks and blooms on end user\u0026rsquo;s machines. They need the data for the software to operate and sharing it makes all user\u0026rsquo;s better off. A naturally-born network effect.\u003c/p\u003e\n\u003ch3 id="prerequisites"\u003eprerequisites\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003echifra scrape\u003c/code\u003e does not work without an RPC endpoint to an Ethereum node. The software works without an \u003ccode\u003e--archive\u003c/code\u003e node, but it works significantly better with one. An additional requirement for the software to work properly is an RPC that provides OpenEthereum\u0026rsquo;s \u003ccode\u003etrace_\u003c/code\u003e routines. We\u0026rsquo;ve tested with OpenEthereum and Erigon.\u003c/p\u003e\n\u003cp\u003ePlease see \u003ca href="."\u003ethis article\u003c/a\u003e for more information about running the scraper and building and sharing the index of appearances.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/blockScrape"\u003e\u003ccode\u003eapps/blockScrape\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-init"\u003echifra init\u003c/h2\u003e\n\u003cp\u003eWhen invoked, \u003ccode\u003echifra init\u003c/code\u003e looks at a smart contract called \u003cstrong\u003eThe Unchained Index\u003c/strong\u003e (\u003ca href="https://etherscan.io/address/0xcfd7f3b24f3551741f922fd8c4381aa4e00fc8fd"\u003e0xcfd7f3b24f3551741f922fd8c4381aa4e00fc8fd\u003c/a\u003e). From this smart contract, it extracts a data item called \u003ccode\u003emanifestHash\u003c/code\u003e. The \u003ccode\u003emanifestHash\u003c/code\u003e is an IPFS hash that points to a file (a manifest) that contains every previously pinned Bloom filter and index chunk. TrueBlocks periodically publishes the manifest\u0026rsquo;s hash to the smart contract. This makes the entire index both available for our software to use and impossible for us to withhold. Both of these aspects of the manifest are included by design.\u003c/p\u003e\n\u003cp\u003eIf you stop \u003ccode\u003echifra init\u003c/code\u003e before it finishes, it will pick up against where it left off the next time you run it.\u003c/p\u003e\n\u003cp\u003eCertain parts of the system (\u003ccode\u003echifra list\u003c/code\u003e and \u003ccode\u003echifra export\u003c/code\u003e for example) if you have not previously run \u003ccode\u003echifra init\u003c/code\u003e or \u003ccode\u003echifra scrape\u003c/code\u003e. You will be warned by the system until it\u0026rsquo;s satified.\u003c/p\u003e\n\u003cp\u003eIf you run \u003ccode\u003echifra init\u003c/code\u003e and allow it to complete, the next time you run \u003ccode\u003echifra scrape\u003c/code\u003e, it will start where \u003ccode\u003einit\u003c/code\u003e finished. This means that only the blooms will be stored on your hard drive. Subsequent scraping will produce both chunks and blooms, although you can, if you wish delete chunks that are not being used. You may periodically run \u003ccode\u003echifra init\u003c/code\u003e if you prefer not to scrape.\u003c/p\u003e\n\u003ch3 id="usage-3"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra init\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Leech the Bloom filters from IPFS by first downloading the pin manifest from a smart contract and then downloading the blooms. Optionally \u003ccode\u003e--pin\u003c/code\u003e the resulting download in order to share it with others.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐i\u003c/td\u003e\n\u003ctd\u003e‐‐init\u003c/td\u003e\n\u003ctd\u003einitialize local index by downloading Bloom filters from pinning service\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐k\u003c/td\u003e\n\u003ctd\u003e‐‐init_all\u003c/td\u003e\n\u003ctd\u003einitialize local index by downloading both Bloom filters and index chunks\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐p\u003c/td\u003e\n\u003ctd\u003e‐‐pin_locally\u003c/td\u003e\n\u003ctd\u003epin all local files in the index to an IPFS store (requires IPFS)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐v\u003c/td\u003e\n\u003ctd\u003e‐‐verbose\u003c/td\u003e\n\u003ctd\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e‐h\u003c/td\u003e\n\u003ctd\u003e‐‐help\u003c/td\u003e\n\u003ctd\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOne of \u003ccode\u003e--list\u003c/code\u003e, \u003ccode\u003e--init\u003c/code\u003e, or \u003ccode\u003e--init_all\u003c/code\u003e is required.\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003e--pin_locally\u003c/code\u003e option only works if the IPFS executable is in your path.\n\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/pinMan"\u003e\u003ccode\u003eapps/pinMan\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="chifra-pins"\u003echifra pins\u003c/h2\u003e\n\u003cp\u003eThis tool is not yet ready for production use. Please return to this page later.\u003c/p\u003e\n\u003ch3 id="usage-4"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra pins [-l|-i|-n|-p|-v|-h]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Manage pinned index of appearances and associated Bloom filters.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐l\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐list\u003c/td\u003e\n\u003ctd nowrap\u003elist the index and Bloom filter hashes from local manifest\u003cbr/\u003eor pinning service\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐i\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐init\u003c/td\u003e\n\u003ctd nowrap\u003einitialize local index by downloading Bloom filters\u003cbr/\u003efrom pinning service\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐n\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐init_all\u003c/td\u003e\n\u003ctd nowrap\u003einitialize local index by downloading both Bloom filters\u003cbr/\u003eand index chunks\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐pin_locally\u003c/td\u003e\n\u003ctd nowrap\u003epin all local files in the index to an IPFS store (requires\u003cbr/\u003eIPFS)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOne of \u003ccode\u003e--list\u003c/code\u003e, \u003ccode\u003e--init\u003c/code\u003e, or \u003ccode\u003e--init_all\u003c/code\u003e is required.\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003e--pin_locally\u003c/code\u003e option only works if the IPFS executable is in your path.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/pinMan"\u003e\u003ccode\u003eapps/pinMan\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n'}).add({id:11,href:"/docs/chifra/other/",title:"Other",description:"",content:'\u003cp\u003eThese commands call some useful miscellaneous tools:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echifra quotes\u003c/code\u003e, a rudimentary pricing tool,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echifra explore\u003c/code\u003e a quick way to open a blockchain explorer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eethslurp\u003c/code\u003e an older tool that lets you call data from EtherScan. (This has issues of ceentralization and data quality, see explanation in its section).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cdiv class="alert alert-warning d-flex" role="alert"\u003e\n  \u003cdiv class="flex-shrink-1 alert-icon"\u003e👉\u003c/div\u003e\n  \u003cdiv class="w-100"\u003eNote: some of these tools, like `ethslurp`, require an EtherScan key.\u003c/div\u003e\n\u003c/div\u003e\n\u003ca href="https://docs.trueblocks.io/docs/prologue/installing-trueblocks/#3-update-the-configs-for-your-rpc-and-api-keys"\u003eFollow these instructions to add a key to your config\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-quotes"\u003echifra quotes\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003echifra quotes\u003c/code\u003e tool provides USD ($) price data to other tools and to the command line. Currently, \u003ccode\u003echifra quotes\u003c/code\u003e retrieves its price data from the Poloniex API. In future versions, we will add other sources and provide a mechanism for fair averaging. Ultimately, as more of this type of price data becomes available on chain, we will use those source, but this is not yet implemented.\u003c/p\u003e\n\u003ch3 id="usage"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra quotes [-f|-p|-a|-e|-v|-h]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Freshen and/or display Ethereum price data. This tool has been deprecated.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐f\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐freshen\u003c/td\u003e\n\u003ctd nowrap\u003eFreshen price database\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐period \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eincrement of display, one of [5, 15, 30, 60, 120, 240,\u003cbr/\u003e1440, 10080, hourly, daily, weekly]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐a\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐pair string\u003c/td\u003e\n\u003ctd nowrap\u003ewhich price pair to freshen or list (see Poloniex)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐e\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐feed \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003ethe feed for the price data, one of [poloniex, maker,\u003cbr/\u003etellor]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eValid pairs include any pair from the public Poloniex\u0026rsquo;s API here:\nhttps://poloniex.com/public?command=returnCurrencies.\u003c/li\u003e\n\u003cli\u003eDue to restrictions from Poloniex, this tool retrieves only 30 days of data\nat a time. You must repeatedly run this command until the data is up-to-date.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/getQuotes"\u003e\u003ccode\u003etools/getQuotes\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-explore"\u003echifra explore\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra explore\u003c/code\u003e opens Etherscan (and other explorers \u0026ndash; including our own) to the block, transaction hash, or address you specify. It\u0026rsquo;s a handy (configurable) way to open an explorer from the command line, nothing more.\u003c/p\u003e\n\u003ch3 id="usage-1"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra explore [-l|-g|-h] \u0026lt;term\u0026gt; [term\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Open an explorer for one or more addresses, blocks, or transactions.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eterms\u003c/td\u003e\n\u003ctd nowrap\u003eone or more addresses, names, block, or transaction\u003cbr/\u003eidentifiers\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐l\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐local\u003c/td\u003e\n\u003ctd nowrap\u003eopen the local TrueBlocks explorer\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐g\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐google\u003c/td\u003e\n\u003ctd nowrap\u003esearch google excluding popular blockchain explorers\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/apps/fireStorm"\u003e\u003ccode\u003eapps/fireStorm\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="chifra-slurp"\u003echifra slurp\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003echifra slurp\u003c/code\u003e is the first tool we built in the Ethereum space. It even has its \u003ca href="http://ethslurp.com"\u003eown website\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhile it\u0026rsquo;s useful, it has two shortcomings. First, it is fully centralized, pulling its data from \u003ca href="http://etherscan.io"\u003ehttp://etherscan.io\u003c/a\u003e. Second, is that it does not report every transaction for a given account. This is actually a shortcoming with EtherScan. It\u0026rsquo;s too complicated to explain here, but see our blog.\u003c/p\u003e\n\u003cp\u003eWhile \u003ccode\u003echifra slurp\u003c/code\u003e has its shortcomings, it does provides some nice features. You may use it to pull any transaction initiated by an EOA for example or to explore mining rewards. Visit the above referenced website for more information.\u003c/p\u003e\n\u003ch3 id="usage-2"\u003eusage\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eUsage:\u003c/code\u003e    chifra slurp [-t|-p|-v|-h] \u0026lt;address\u0026gt; [address\u0026hellip;] [block\u0026hellip;]\u003cbr\u003e\n\u003ccode\u003ePurpose:\u003c/code\u003e  Fetch data from EtherScan for any address.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWhere:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eOption\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eaddrs\u003c/td\u003e\n\u003ctd nowrap\u003eone or more addresses to slurp from Etherscan (required)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e\u003c/td\u003e\n\u003ctd nowrap\u003eblocks\u003c/td\u003e\n\u003ctd nowrap\u003ean optional range of blocks to slurp\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐t\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐types \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eone or more types of transactions to request, one or\u003cbr/\u003emore of [ext, int, token, nfts, miner, uncles, all]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐p\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐appearances\u003c/td\u003e\n\u003ctd nowrap\u003eshow only the blocknumer.tx_id appearances of the exported\u003cbr/\u003etransactions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐x\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐fmt \u0026lt;val\u0026gt;\u003c/td\u003e\n\u003ctd nowrap\u003eexport format, one of [none, json, txt, csv, api]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐v\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐verbose\u003c/td\u003e\n\u003ctd nowrap\u003eset verbose level (optional level defaults to 1)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd nowrap\u003e‐h\u003c/td\u003e\n\u003ctd nowrap\u003e‐‐help\u003c/td\u003e\n\u003ctd nowrap\u003edisplay this help screen\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003cp\u003e\u003ccode\u003eNotes:\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePortions of this software are Powered by Etherscan.io APIs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSource code\u003c/strong\u003e: \u003ca href="https://github.com/TrueBlocks/trueblocks-core/tree/master/src/tools/ethslurp"\u003e\u003ccode\u003etools/ethslurp\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n'}).add({id:12,href:"/docs/chifra/",title:"Chifra",description:"The TrueBlocks CLI",content:""}).add({id:13,href:"/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),userinput.addEventListener('input',c,!0),suggestions.addEventListener('click',e,!0);function c(){var h=this.value,f=b.search(h,{limit:5,index:["content"],enrich:!0}),g=suggestions.childNodes,e=0,i=f.length,c;for(suggestions.classList.remove('d-none'),f.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.result[e].doc.href,t.textContent=b.result[e].doc.title,d.textContent=b.result[e].doc.description,suggestions.appendChild(c)});g.length>i;)suggestions.removeChild(g[e])}function e(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()